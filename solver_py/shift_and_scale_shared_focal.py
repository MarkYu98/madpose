import madpose
import numpy as np


def solve_shift_and_scale_shared_focal(x1_, x2_, d1, d2):
    # Estimates scale, shift and a shared focal length
    # x1 should be four image points, i.e. x1[0] = [x,y,1]
    # with corresponding depth value d1[0]
    #
    # Returns list of solutions (a1,b1,a2,b2,f) where
    #   d1_corrected = a1 * d1 + b1
    #   d2_corrected = a2 * d2 + b2
    # and f is the shared focal length.
    # Note that only the first 3 points satisfy the rigidity constraints.

    # Normalize focal length
    x1 = x1_.copy()
    x2 = x2_.copy()

    f1_0 = np.abs(x1[:, 0:2].flatten()).mean()
    f2_0 = np.abs(x2[:, 0:2].flatten()).mean()
    f0 = 0.5 * (f1_0 + f2_0)
    x1[:, 0:2] /= f0
    x2[:, 0:2] /= f0

    # Compute coefficients
    coeffs = np.zeros((32,))
    coeffs[0] = (
        2 * x2[0, 0] * x2[1, 0]
        + 2 * x2[0, 1] * x2[1, 1]
        - (x2[0, 0] ** 2)
        - (x2[0, 1] ** 2)
        - (x2[1, 0] ** 2)
        - (x2[1, 1] ** 2)
    )
    coeffs[1] = (
        (x1[0, 0] ** 2)
        - 2 * x1[0, 1] * x1[1, 1]
        - 2 * x1[0, 0] * x1[1, 0]
        + (x1[0, 1] ** 2)
        + (x1[1, 0] ** 2)
        + (x1[1, 1] ** 2)
    )
    coeffs[2] = (
        2 * d2[0] * x2[0, 0] * x2[1, 0]
        - 2 * d2[0] * (x2[0, 1] ** 2)
        - 2 * d2[1] * (x2[1, 0] ** 2)
        - 2 * d2[1] * (x2[1, 1] ** 2)
        - 2 * d2[0] * (x2[0, 0] ** 2)
        + 2 * d2[1] * x2[0, 0] * x2[1, 0]
        + 2 * d2[0] * x2[0, 1] * x2[1, 1]
        + 2 * d2[1] * x2[0, 1] * x2[1, 1]
    )
    coeffs[3] = (
        2 * d2[0] * d2[1] * x2[0, 0] * x2[1, 0]
        - (d2[0] ** 2) * (x2[0, 1] ** 2)
        - (d2[1] ** 2) * (x2[1, 0] ** 2)
        - (d2[1] ** 2) * (x2[1, 1] ** 2)
        - (d2[0] ** 2) * (x2[0, 0] ** 2)
        + 2 * d2[0] * d2[1] * x2[0, 1] * x2[1, 1]
    )
    coeffs[4] = (
        2 * d1[0] * (x1[0, 0] ** 2)
        + 2 * d1[0] * (x1[0, 1] ** 2)
        + 2 * d1[1] * (x1[1, 0] ** 2)
        + 2 * d1[1] * (x1[1, 1] ** 2)
        - 2 * d1[0] * x1[0, 0] * x1[1, 0]
        - 2 * d1[1] * x1[0, 0] * x1[1, 0]
        - 2 * d1[0] * x1[0, 1] * x1[1, 1]
        - 2 * d1[1] * x1[0, 1] * x1[1, 1]
    )
    coeffs[5] = 2 * d2[0] * d2[1] - (d2[0] ** 2) - (d2[1] ** 2)
    coeffs[6] = (
        (d1[0] ** 2) * (x1[0, 0] ** 2)
        + (d1[0] ** 2) * (x1[0, 1] ** 2)
        + (d1[1] ** 2) * (x1[1, 0] ** 2)
        + (d1[1] ** 2) * (x1[1, 1] ** 2)
        - 2 * d1[0] * d1[1] * x1[0, 0] * x1[1, 0]
        - 2 * d1[0] * d1[1] * x1[0, 1] * x1[1, 1]
    )
    coeffs[7] = (d1[0] ** 2) - 2 * d1[0] * d1[1] + (d1[1] ** 2)
    coeffs[8] = (
        2 * x2[0, 0] * x2[2, 0]
        + 2 * x2[0, 1] * x2[2, 1]
        - (x2[0, 0] ** 2)
        - (x2[0, 1] ** 2)
        - (x2[2, 0] ** 2)
        - (x2[2, 1] ** 2)
    )
    coeffs[9] = (
        (x1[0, 0] ** 2)
        - 2 * x1[0, 1] * x1[2, 1]
        - 2 * x1[0, 0] * x1[2, 0]
        + (x1[0, 1] ** 2)
        + (x1[2, 0] ** 2)
        + (x1[2, 1] ** 2)
    )
    coeffs[10] = (
        2 * d2[0] * x2[0, 0] * x2[2, 0]
        - 2 * d2[0] * (x2[0, 1] ** 2)
        - 2 * d2[2] * (x2[2, 0] ** 2)
        - 2 * d2[2] * (x2[2, 1] ** 2)
        - 2 * d2[0] * (x2[0, 0] ** 2)
        + 2 * d2[0] * x2[0, 1] * x2[2, 1]
        + 2 * d2[2] * x2[0, 0] * x2[2, 0]
        + 2 * d2[2] * x2[0, 1] * x2[2, 1]
    )
    coeffs[11] = (
        2 * d2[0] * d2[2] * x2[0, 0] * x2[2, 0]
        - (d2[0] ** 2) * (x2[0, 1] ** 2)
        - (d2[2] ** 2) * (x2[2, 0] ** 2)
        - (d2[2] ** 2) * (x2[2, 1] ** 2)
        - (d2[0] ** 2) * (x2[0, 0] ** 2)
        + 2 * d2[0] * d2[2] * x2[0, 1] * x2[2, 1]
    )
    coeffs[12] = (
        2 * d1[0] * (x1[0, 0] ** 2)
        + 2 * d1[0] * (x1[0, 1] ** 2)
        + 2 * d1[2] * (x1[2, 0] ** 2)
        + 2 * d1[2] * (x1[2, 1] ** 2)
        - 2 * d1[0] * x1[0, 0] * x1[2, 0]
        - 2 * d1[0] * x1[0, 1] * x1[2, 1]
        - 2 * d1[2] * x1[0, 0] * x1[2, 0]
        - 2 * d1[2] * x1[0, 1] * x1[2, 1]
    )
    coeffs[13] = 2 * d2[0] * d2[2] - (d2[0] ** 2) - (d2[2] ** 2)
    coeffs[14] = (
        (d1[0] ** 2) * (x1[0, 0] ** 2)
        + (d1[0] ** 2) * (x1[0, 1] ** 2)
        + (d1[2] ** 2) * (x1[2, 0] ** 2)
        + (d1[2] ** 2) * (x1[2, 1] ** 2)
        - 2 * d1[0] * d1[2] * x1[0, 0] * x1[2, 0]
        - 2 * d1[0] * d1[2] * x1[0, 1] * x1[2, 1]
    )
    coeffs[15] = (d1[0] ** 2) - 2 * d1[0] * d1[2] + (d1[2] ** 2)
    coeffs[16] = (
        2 * x2[1, 0] * x2[2, 0]
        + 2 * x2[1, 1] * x2[2, 1]
        - (x2[1, 0] ** 2)
        - (x2[1, 1] ** 2)
        - (x2[2, 0] ** 2)
        - (x2[2, 1] ** 2)
    )
    coeffs[17] = (
        (x1[1, 0] ** 2)
        - 2 * x1[1, 1] * x1[2, 1]
        - 2 * x1[1, 0] * x1[2, 0]
        + (x1[1, 1] ** 2)
        + (x1[2, 0] ** 2)
        + (x1[2, 1] ** 2)
    )
    coeffs[18] = (
        2 * d2[1] * x2[1, 0] * x2[2, 0]
        - 2 * d2[1] * (x2[1, 1] ** 2)
        - 2 * d2[2] * (x2[2, 0] ** 2)
        - 2 * d2[2] * (x2[2, 1] ** 2)
        - 2 * d2[1] * (x2[1, 0] ** 2)
        + 2 * d2[2] * x2[1, 0] * x2[2, 0]
        + 2 * d2[1] * x2[1, 1] * x2[2, 1]
        + 2 * d2[2] * x2[1, 1] * x2[2, 1]
    )
    coeffs[19] = (
        2 * d2[1] * d2[2] * x2[1, 0] * x2[2, 0]
        - (d2[1] ** 2) * (x2[1, 1] ** 2)
        - (d2[2] ** 2) * (x2[2, 0] ** 2)
        - (d2[2] ** 2) * (x2[2, 1] ** 2)
        - (d2[1] ** 2) * (x2[1, 0] ** 2)
        + 2 * d2[1] * d2[2] * x2[1, 1] * x2[2, 1]
    )
    coeffs[20] = (
        2 * d1[1] * (x1[1, 0] ** 2)
        + 2 * d1[1] * (x1[1, 1] ** 2)
        + 2 * d1[2] * (x1[2, 0] ** 2)
        + 2 * d1[2] * (x1[2, 1] ** 2)
        - 2 * d1[1] * x1[1, 0] * x1[2, 0]
        - 2 * d1[2] * x1[1, 0] * x1[2, 0]
        - 2 * d1[1] * x1[1, 1] * x1[2, 1]
        - 2 * d1[2] * x1[1, 1] * x1[2, 1]
    )
    coeffs[21] = 2 * d2[1] * d2[2] - (d2[1] ** 2) - (d2[2] ** 2)
    coeffs[22] = (
        (d1[1] ** 2) * (x1[1, 0] ** 2)
        + (d1[1] ** 2) * (x1[1, 1] ** 2)
        + (d1[2] ** 2) * (x1[2, 0] ** 2)
        + (d1[2] ** 2) * (x1[2, 1] ** 2)
        - 2 * d1[1] * d1[2] * x1[1, 0] * x1[2, 0]
        - 2 * d1[1] * d1[2] * x1[1, 1] * x1[2, 1]
    )
    coeffs[23] = (d1[1] ** 2) - 2 * d1[1] * d1[2] + (d1[2] ** 2)
    coeffs[24] = (
        2 * x2[0, 0] * x2[3, 0]
        + 2 * x2[0, 1] * x2[3, 1]
        - (x2[0, 0] ** 2)
        - (x2[0, 1] ** 2)
        - (x2[3, 0] ** 2)
        - (x2[3, 1] ** 2)
    )
    coeffs[25] = (
        (x1[0, 0] ** 2)
        - 2 * x1[0, 1] * x1[3, 1]
        - 2 * x1[0, 0] * x1[3, 0]
        + (x1[0, 1] ** 2)
        + (x1[3, 0] ** 2)
        + (x1[3, 1] ** 2)
    )
    coeffs[26] = (
        2 * d2[0] * x2[0, 0] * x2[3, 0]
        - 2 * d2[0] * (x2[0, 1] ** 2)
        - 2 * d2[3] * (x2[3, 0] ** 2)
        - 2 * d2[3] * (x2[3, 1] ** 2)
        - 2 * d2[0] * (x2[0, 0] ** 2)
        + 2 * d2[0] * x2[0, 1] * x2[3, 1]
        + 2 * d2[3] * x2[0, 0] * x2[3, 0]
        + 2 * d2[3] * x2[0, 1] * x2[3, 1]
    )
    coeffs[27] = (
        2 * d2[0] * d2[3] * x2[0, 0] * x2[3, 0]
        - (d2[0] ** 2) * (x2[0, 1] ** 2)
        - (d2[3] ** 2) * (x2[3, 0] ** 2)
        - (d2[3] ** 2) * (x2[3, 1] ** 2)
        - (d2[0] ** 2) * (x2[0, 0] ** 2)
        + 2 * d2[0] * d2[3] * x2[0, 1] * x2[3, 1]
    )
    coeffs[28] = (
        2 * d1[0] * (x1[0, 0] ** 2)
        + 2 * d1[0] * (x1[0, 1] ** 2)
        + 2 * d1[3] * (x1[3, 0] ** 2)
        + 2 * d1[3] * (x1[3, 1] ** 2)
        - 2 * d1[0] * x1[0, 0] * x1[3, 0]
        - 2 * d1[0] * x1[0, 1] * x1[3, 1]
        - 2 * d1[3] * x1[0, 0] * x1[3, 0]
        - 2 * d1[3] * x1[0, 1] * x1[3, 1]
    )
    coeffs[29] = 2 * d2[0] * d2[3] - (d2[0] ** 2) - (d2[3] ** 2)
    coeffs[30] = (
        (d1[0] ** 2) * (x1[0, 0] ** 2)
        + (d1[0] ** 2) * (x1[0, 1] ** 2)
        + (d1[3] ** 2) * (x1[3, 0] ** 2)
        + (d1[3] ** 2) * (x1[3, 1] ** 2)
        - 2 * d1[0] * d1[3] * x1[0, 0] * x1[3, 0]
        - 2 * d1[0] * d1[3] * x1[0, 1] * x1[3, 1]
    )
    coeffs[31] = (d1[0] ** 2) - 2 * d1[0] * d1[3] + (d1[3] ** 2)

    # Setup expanded equation system
    coeff_ind0 = [
        0,
        8,
        16,
        24,
        1,
        9,
        17,
        25,
        2,
        10,
        0,
        8,
        16,
        18,
        24,
        26,
        0,
        8,
        16,
        24,
        0,
        8,
        16,
        24,
        0,
        8,
        16,
        24,
        1,
        9,
        17,
        25,
        1,
        9,
        17,
        25,
        3,
        11,
        2,
        10,
        18,
        19,
        26,
        27,
        4,
        12,
        2,
        1,
        10,
        9,
        20,
        18,
        17,
        28,
        26,
        25,
        1,
        9,
        17,
        25,
        2,
        10,
        8,
        0,
        16,
        18,
        24,
        26,
        2,
        10,
        0,
        16,
        18,
        8,
        24,
        26,
        8,
        0,
        16,
        24,
        5,
        13,
        21,
        29,
        3,
        11,
        19,
        27,
        4,
        3,
        12,
        11,
        20,
        9,
        28,
        1,
        19,
        17,
        27,
        25,
        4,
        12,
        1,
        17,
        20,
        9,
        25,
        28,
        3,
        11,
        10,
        2,
        18,
        19,
        26,
        27,
        6,
        14,
        4,
        3,
        12,
        11,
        2,
        22,
        18,
        19,
        20,
        10,
        26,
        30,
        28,
        27,
        4,
        12,
        9,
        20,
        1,
        17,
        25,
        28,
        10,
        2,
        18,
        0,
        16,
        24,
        26,
        8,
        5,
        13,
        21,
        29,
        11,
        3,
        19,
        27,
        6,
        14,
        22,
        12,
        3,
        30,
        4,
        19,
        20,
        11,
        27,
        28,
        6,
        14,
        4,
        20,
        22,
        12,
        1,
        17,
        25,
        28,
        30,
        9,
        6,
        14,
        11,
        3,
        19,
        22,
        2,
        18,
        26,
        27,
        30,
        10,
        6,
        14,
        12,
        22,
        4,
        20,
        28,
        30,
        14,
        6,
        22,
        3,
        19,
        27,
        30,
        11,
        14,
        6,
        22,
        30,
        5,
        13,
        21,
        29,
        6,
        22,
        14,
        4,
        20,
        28,
        30,
        12,
        7,
        15,
        23,
        31,
        5,
        13,
        21,
        29,
        7,
        15,
        23,
        31,
        7,
        15,
        5,
        13,
        23,
        21,
        31,
        29,
    ]
    coeff_ind1 = [
        7,
        23,
        31,
        15,
        6,
        22,
        30,
        14,
        7,
        23,
        15,
        31,
        7,
        15,
        23,
        5,
        31,
        21,
        13,
        29,
        15,
        7,
        23,
        31,
        7,
        15,
        13,
        5,
        21,
        23,
        29,
        31,
        15,
        7,
        23,
        5,
        21,
        29,
        31,
        13,
        13,
        5,
        21,
        29,
    ]
    ind0 = [
        0,
        1,
        14,
        30,
        36,
        37,
        50,
        66,
        72,
        73,
        74,
        78,
        80,
        86,
        87,
        102,
        111,
        115,
        126,
        139,
        148,
        153,
        167,
        177,
        185,
        190,
        199,
        215,
        218,
        222,
        224,
        231,
        255,
        259,
        270,
        283,
        288,
        289,
        290,
        294,
        296,
        302,
        303,
        318,
        324,
        325,
        327,
        328,
        331,
        333,
        338,
        342,
        347,
        354,
        355,
        357,
        365,
        370,
        379,
        395,
        400,
        405,
        407,
        412,
        418,
        419,
        428,
        429,
        437,
        442,
        444,
        449,
        451,
        456,
        461,
        467,
        481,
        488,
        489,
        496,
        504,
        505,
        518,
        534,
        542,
        546,
        548,
        555,
        578,
        579,
        582,
        583,
        584,
        587,
        591,
        592,
        594,
        598,
        607,
        608,
        615,
        619,
        624,
        629,
        630,
        636,
        641,
        643,
        652,
        657,
        659,
        664,
        670,
        671,
        680,
        681,
        684,
        685,
        688,
        689,
        693,
        694,
        696,
        698,
        701,
        703,
        707,
        708,
        713,
        714,
        717,
        719,
        725,
        730,
        733,
        739,
        740,
        741,
        748,
        755,
        769,
        776,
        777,
        781,
        782,
        783,
        784,
        790,
        796,
        801,
        815,
        825,
        839,
        844,
        850,
        860,
        866,
        870,
        872,
        875,
        876,
        879,
        880,
        881,
        886,
        888,
        893,
        896,
        903,
        907,
        912,
        917,
        918,
        924,
        925,
        926,
        927,
        929,
        931,
        934,
        940,
        945,
        949,
        956,
        957,
        959,
        961,
        962,
        963,
        964,
        969,
        970,
        977,
        982,
        985,
        991,
        992,
        993,
        1000,
        1007,
        1019,
        1024,
        1030,
        1033,
        1034,
        1035,
        1040,
        1042,
        1057,
        1064,
        1065,
        1072,
        1082,
        1086,
        1088,
        1095,
        1128,
        1133,
        1140,
        1141,
        1142,
        1143,
        1145,
        1150,
        1155,
        1159,
        1170,
        1183,
        1191,
        1195,
        1206,
        1219,
        1229,
        1234,
        1243,
        1259,
        1260,
        1261,
        1265,
        1270,
        1274,
        1279,
        1290,
        1295,
    ]
    ind1 = [
        25,
        26,
        27,
        34,
        61,
        62,
        63,
        70,
        84,
        89,
        96,
        101,
        110,
        114,
        116,
        120,
        123,
        125,
        132,
        137,
        157,
        164,
        165,
        172,
        184,
        189,
        193,
        200,
        201,
        203,
        208,
        213,
        227,
        232,
        238,
        241,
        242,
        243,
        248,
        250,
        263,
        268,
        274,
        284,
    ]

    C0 = np.zeros((36, 36))
    C1 = np.zeros((36, 8))
    C0[np.unravel_index(ind0, (36, 36), "F")] = coeffs[coeff_ind0]
    C1[np.unravel_index(ind1, (36, 8), "F")] = coeffs[coeff_ind1]

    # Linear elimination
    C2 = np.linalg.solve(C0, C1)

    # Setup action matrix
    AM = np.array(
        [
            [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            -C2[31, :],
            -C2[32, :],
            -C2[33, :],
            -C2[34, :],
            -C2[35, :],
            [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
            -C2[30, :],
        ]
    )

    # Solve eigenvalue problem and get real solutions
    D, V = np.linalg.eig(AM)
    sols = np.array(
        [V[6, :] / V[0, :], D, V[4, :] / V[0, :], V[1, :] / V[0, :]]
    ).T
    sols = sols[np.isreal(D), :]

    # Extract solutions
    solutions = []

    for s in sols:
        s = np.real(s)
        if s[3] < 0:
            continue
        solutions.append(
            (1.0, s[1], np.sqrt(s[0]), s[2] * np.sqrt(s[0]), f0 / np.sqrt(s[3]))
        )

    return solutions


def find_transform(X1, X2):
    m1 = np.mean(X1, axis=0)
    m2 = np.mean(X2, axis=0)
    X1m = X1 - m1
    X2m = X2 - m2
    u, s, vt = np.linalg.svd(X2m.T @ X1m)
    R = u @ np.diag([1.0, 1.0, np.linalg.det(u @ vt)]) @ vt
    t = m2 - R @ m1
    return R, t


def test_solver():
    # Setup instance (with positive depths)
    while True:
        x1 = np.c_[np.random.randn(4, 2), np.ones((4,))]
        f_gt = 1000.0 + 2000.0 * np.random.rand(1)
        d1_gt = 1.0 + 5 * np.random.rand(4)
        X = x1 * d1_gt[:, None]
        R = np.linalg.qr(np.random.randn(3, 3))[0]
        R = R * np.linalg.det(R)
        t = np.random.randn(3)
        X2 = X @ R.T + t
        d2_gt = X2[:, 2]
        x2 = X2 / d2_gt[:, None]

        # Add shared focal length
        x1[:, 0:2] *= f_gt
        x2[:, 0:2] *= f_gt
        x2[:, 0:2] += 0.5 * np.random.randn(4, 2) - 0.25

        if np.all(d2_gt > 0):
            break

    # Shift and scale gt depths
    a1_gt = np.random.rand(1)
    b1_gt = np.random.randn(1)
    a2_gt = np.random.rand(1)
    b2_gt = np.random.randn(1)

    # d1_gt = a1 * d1 + b1
    d1 = (d1_gt - b1_gt) / a1_gt
    d2 = (d2_gt - b2_gt) / a2_gt

    sols = solve_shift_and_scale_shared_focal(x1, x2, d1, d2)
    sols_mono = madpose.solve_scale_and_shift_shared_focal(x1.T, x2.T, d1, d2)
    posescaleoffsetsfs = madpose.estimate_scale_shift_pose_shared_focal(
        x1.T, x2.T, d1, d2
    )

    for p in posescaleoffsetsfs:
        R_est, t_est = p.R(), p.t()
        a, b1, b2, f = p.scale, p.offset0, p.offset1, p.focal
        err_a = np.abs(a - a2_gt / a1_gt)

        d1_corr = d1 + b1
        d2_corr = a * d2 + b2

        K_ = np.array([[f, 0, 0], [0, f, 0], [0, 0, 1]])
        K_inv = np.linalg.inv(K_)
        x1u = x1.copy()
        x1u = x1u @ K_inv.T
        x2u = x2.copy()
        x2u = x2u @ K_inv.T

        X1 = x1u * d1_corr[:, None]
        X2 = x2u * d2_corr[:, None]
        print(R_est @ X1.T + t_est[:, None] - X2.T)

        err_R = np.linalg.norm(R - R_est)
        err_t = np.linalg.norm(
            t / np.linalg.norm(t) - t_est / np.linalg.norm(t_est)
        )
        print(
            f"posescaleoffsetsfs, residual={err_a}, rotation={err_R}, translation={err_t}"
        )

    print(len(sols), len(sols_mono))
    for k, (a1, b1, a2, b2, f) in enumerate(sols + sols_mono):
        err = (
            np.abs(a2 - a2_gt / a1_gt)
            + np.abs(b1 - b1_gt / a1_gt)
            + np.abs(b2 - b2_gt / a1_gt)
            + np.abs(f - f_gt)
        )
        focal_err = np.abs(f - f_gt)
        print(f"focal_err={focal_err}")

        d1_corr = a1 * d1 + b1
        d2_corr = a2 * d2 + b2

        x1u = x1.copy()
        x1u[:, 0:2] /= f
        x2u = x2.copy()
        x2u[:, 0:2] /= f

        X1 = x1u * d1_corr[:, None]
        X2 = x2u * d2_corr[:, None]
        R_est, t_est = find_transform(X1[0:4, :], X2[0:4, :])

        err_R = np.linalg.norm(R - R_est)
        err_t = np.linalg.norm(
            t / np.linalg.norm(t) - t_est / np.linalg.norm(t_est)
        )
        print(
            f"solution={k}, residual={err}, rotation={err_R}, translation={err_t}"
        )


if __name__ == "__main__":
    test_solver()
