import madpose
import numpy as np


def solve_shift_and_scale_two_focal(x1_, x2_, d1, d2):
    # Estimates scale, shift, and two focal lengths
    # x1 should be four image points, i.e. x1[0] = [x,y,1]
    # with corresponding depth value d1[0]
    #
    # Returns list of solutions (a1,b1,a2,b2,f1, f2) where
    #   d1_corrected = a1 * d1 + b1
    #   d2_corrected = a2 * d2 + b2
    # and f1 and f2 is the two focal lengths.
    # Note that only the first 3 points satisfy the rigidity constraints.

    # Normalize focal length
    x1 = x1_.copy()
    x2 = x2_.copy()

    f1_0 = np.abs(x1[:, 0:2].flatten()).mean()
    f2_0 = np.abs(x2[:, 0:2].flatten()).mean()
    x1[:, 0:2] /= f1_0
    x2[:, 0:2] /= f2_0

    # Compute coefficients
    coeffs = np.zeros((40,))
    coeffs[0] = (
        2 * x2[0, 0] * x2[1, 0]
        + 2 * x2[0, 1] * x2[1, 1]
        - (x2[0, 0] ** 2)
        - (x2[0, 1] ** 2)
        - (x2[1, 0] ** 2)
        - (x2[1, 1] ** 2)
    )
    coeffs[1] = (
        (x1[0, 0] ** 2)
        - 2 * x1[0, 1] * x1[1, 1]
        - 2 * x1[0, 0] * x1[1, 0]
        + (x1[0, 1] ** 2)
        + (x1[1, 0] ** 2)
        + (x1[1, 1] ** 2)
    )
    coeffs[2] = (
        2 * d2[0] * x2[0, 0] * x2[1, 0]
        - 2 * d2[0] * (x2[0, 1] ** 2)
        - 2 * d2[1] * (x2[1, 0] ** 2)
        - 2 * d2[1] * (x2[1, 1] ** 2)
        - 2 * d2[0] * (x2[0, 0] ** 2)
        + 2 * d2[1] * x2[0, 0] * x2[1, 0]
        + 2 * d2[0] * x2[0, 1] * x2[1, 1]
        + 2 * d2[1] * x2[0, 1] * x2[1, 1]
    )
    coeffs[3] = (
        2 * d1[0] * (x1[0, 0] ** 2)
        + 2 * d1[0] * (x1[0, 1] ** 2)
        + 2 * d1[1] * (x1[1, 0] ** 2)
        + 2 * d1[1] * (x1[1, 1] ** 2)
        - 2 * d1[0] * x1[0, 0] * x1[1, 0]
        - 2 * d1[1] * x1[0, 0] * x1[1, 0]
        - 2 * d1[0] * x1[0, 1] * x1[1, 1]
        - 2 * d1[1] * x1[0, 1] * x1[1, 1]
    )
    coeffs[4] = (
        2 * d2[0] * d2[1] * x2[0, 0] * x2[1, 0]
        - (d2[0] ** 2) * (x2[0, 1] ** 2)
        - (d2[1] ** 2) * (x2[1, 0] ** 2)
        - (d2[1] ** 2) * (x2[1, 1] ** 2)
        - (d2[0] ** 2) * (x2[0, 0] ** 2)
        + 2 * d2[0] * d2[1] * x2[0, 1] * x2[1, 1]
    )
    coeffs[5] = 2 * d2[0] * d2[1] - (d2[0] ** 2) - (d2[1] ** 2)
    coeffs[6] = (
        (d1[0] ** 2) * (x1[0, 0] ** 2)
        + (d1[0] ** 2) * (x1[0, 1] ** 2)
        + (d1[1] ** 2) * (x1[1, 0] ** 2)
        + (d1[1] ** 2) * (x1[1, 1] ** 2)
        - 2 * d1[0] * d1[1] * x1[0, 0] * x1[1, 0]
        - 2 * d1[0] * d1[1] * x1[0, 1] * x1[1, 1]
    )
    coeffs[7] = (d1[0] ** 2) - 2 * d1[0] * d1[1] + (d1[1] ** 2)
    coeffs[8] = (
        2 * x2[0, 0] * x2[2, 0]
        + 2 * x2[0, 1] * x2[2, 1]
        - (x2[0, 0] ** 2)
        - (x2[0, 1] ** 2)
        - (x2[2, 0] ** 2)
        - (x2[2, 1] ** 2)
    )
    coeffs[9] = (
        (x1[0, 0] ** 2)
        - 2 * x1[0, 1] * x1[2, 1]
        - 2 * x1[0, 0] * x1[2, 0]
        + (x1[0, 1] ** 2)
        + (x1[2, 0] ** 2)
        + (x1[2, 1] ** 2)
    )
    coeffs[10] = (
        2 * d2[0] * x2[0, 0] * x2[2, 0]
        - 2 * d2[0] * (x2[0, 1] ** 2)
        - 2 * d2[2] * (x2[2, 0] ** 2)
        - 2 * d2[2] * (x2[2, 1] ** 2)
        - 2 * d2[0] * (x2[0, 0] ** 2)
        + 2 * d2[0] * x2[0, 1] * x2[2, 1]
        + 2 * d2[2] * x2[0, 0] * x2[2, 0]
        + 2 * d2[2] * x2[0, 1] * x2[2, 1]
    )
    coeffs[11] = (
        2 * d1[0] * (x1[0, 0] ** 2)
        + 2 * d1[0] * (x1[0, 1] ** 2)
        + 2 * d1[2] * (x1[2, 0] ** 2)
        + 2 * d1[2] * (x1[2, 1] ** 2)
        - 2 * d1[0] * x1[0, 0] * x1[2, 0]
        - 2 * d1[0] * x1[0, 1] * x1[2, 1]
        - 2 * d1[2] * x1[0, 0] * x1[2, 0]
        - 2 * d1[2] * x1[0, 1] * x1[2, 1]
    )
    coeffs[12] = (
        2 * d2[0] * d2[2] * x2[0, 0] * x2[2, 0]
        - (d2[0] ** 2) * (x2[0, 1] ** 2)
        - (d2[2] ** 2) * (x2[2, 0] ** 2)
        - (d2[2] ** 2) * (x2[2, 1] ** 2)
        - (d2[0] ** 2) * (x2[0, 0] ** 2)
        + 2 * d2[0] * d2[2] * x2[0, 1] * x2[2, 1]
    )
    coeffs[13] = 2 * d2[0] * d2[2] - (d2[0] ** 2) - (d2[2] ** 2)
    coeffs[14] = (
        (d1[0] ** 2) * (x1[0, 0] ** 2)
        + (d1[0] ** 2) * (x1[0, 1] ** 2)
        + (d1[2] ** 2) * (x1[2, 0] ** 2)
        + (d1[2] ** 2) * (x1[2, 1] ** 2)
        - 2 * d1[0] * d1[2] * x1[0, 0] * x1[2, 0]
        - 2 * d1[0] * d1[2] * x1[0, 1] * x1[2, 1]
    )
    coeffs[15] = (d1[0] ** 2) - 2 * d1[0] * d1[2] + (d1[2] ** 2)
    coeffs[16] = (
        2 * x2[1, 0] * x2[2, 0]
        + 2 * x2[1, 1] * x2[2, 1]
        - (x2[1, 0] ** 2)
        - (x2[1, 1] ** 2)
        - (x2[2, 0] ** 2)
        - (x2[2, 1] ** 2)
    )
    coeffs[17] = (
        (x1[1, 0] ** 2)
        - 2 * x1[1, 1] * x1[2, 1]
        - 2 * x1[1, 0] * x1[2, 0]
        + (x1[1, 1] ** 2)
        + (x1[2, 0] ** 2)
        + (x1[2, 1] ** 2)
    )
    coeffs[18] = (
        2 * d2[1] * x2[1, 0] * x2[2, 0]
        - 2 * d2[1] * (x2[1, 1] ** 2)
        - 2 * d2[2] * (x2[2, 0] ** 2)
        - 2 * d2[2] * (x2[2, 1] ** 2)
        - 2 * d2[1] * (x2[1, 0] ** 2)
        + 2 * d2[2] * x2[1, 0] * x2[2, 0]
        + 2 * d2[1] * x2[1, 1] * x2[2, 1]
        + 2 * d2[2] * x2[1, 1] * x2[2, 1]
    )
    coeffs[19] = (
        2 * d1[1] * (x1[1, 0] ** 2)
        + 2 * d1[1] * (x1[1, 1] ** 2)
        + 2 * d1[2] * (x1[2, 0] ** 2)
        + 2 * d1[2] * (x1[2, 1] ** 2)
        - 2 * d1[1] * x1[1, 0] * x1[2, 0]
        - 2 * d1[2] * x1[1, 0] * x1[2, 0]
        - 2 * d1[1] * x1[1, 1] * x1[2, 1]
        - 2 * d1[2] * x1[1, 1] * x1[2, 1]
    )
    coeffs[20] = (
        2 * d2[1] * d2[2] * x2[1, 0] * x2[2, 0]
        - (d2[1] ** 2) * (x2[1, 1] ** 2)
        - (d2[2] ** 2) * (x2[2, 0] ** 2)
        - (d2[2] ** 2) * (x2[2, 1] ** 2)
        - (d2[1] ** 2) * (x2[1, 0] ** 2)
        + 2 * d2[1] * d2[2] * x2[1, 1] * x2[2, 1]
    )
    coeffs[21] = 2 * d2[1] * d2[2] - (d2[1] ** 2) - (d2[2] ** 2)
    coeffs[22] = (
        (d1[1] ** 2) * (x1[1, 0] ** 2)
        + (d1[1] ** 2) * (x1[1, 1] ** 2)
        + (d1[2] ** 2) * (x1[2, 0] ** 2)
        + (d1[2] ** 2) * (x1[2, 1] ** 2)
        - 2 * d1[1] * d1[2] * x1[1, 0] * x1[2, 0]
        - 2 * d1[1] * d1[2] * x1[1, 1] * x1[2, 1]
    )
    coeffs[23] = (d1[1] ** 2) - 2 * d1[1] * d1[2] + (d1[2] ** 2)
    coeffs[24] = (
        2 * x2[0, 0] * x2[3, 0]
        + 2 * x2[0, 1] * x2[3, 1]
        - (x2[0, 0] ** 2)
        - (x2[0, 1] ** 2)
        - (x2[3, 0] ** 2)
        - (x2[3, 1] ** 2)
    )
    coeffs[25] = (
        (x1[0, 0] ** 2)
        - 2 * x1[0, 1] * x1[3, 1]
        - 2 * x1[0, 0] * x1[3, 0]
        + (x1[0, 1] ** 2)
        + (x1[3, 0] ** 2)
        + (x1[3, 1] ** 2)
    )
    coeffs[26] = (
        2 * d2[0] * x2[0, 0] * x2[3, 0]
        - 2 * d2[0] * (x2[0, 1] ** 2)
        - 2 * d2[3] * (x2[3, 0] ** 2)
        - 2 * d2[3] * (x2[3, 1] ** 2)
        - 2 * d2[0] * (x2[0, 0] ** 2)
        + 2 * d2[0] * x2[0, 1] * x2[3, 1]
        + 2 * d2[3] * x2[0, 0] * x2[3, 0]
        + 2 * d2[3] * x2[0, 1] * x2[3, 1]
    )
    coeffs[27] = (
        2 * d1[0] * (x1[0, 0] ** 2)
        + 2 * d1[0] * (x1[0, 1] ** 2)
        + 2 * d1[3] * (x1[3, 0] ** 2)
        + 2 * d1[3] * (x1[3, 1] ** 2)
        - 2 * d1[0] * x1[0, 0] * x1[3, 0]
        - 2 * d1[0] * x1[0, 1] * x1[3, 1]
        - 2 * d1[3] * x1[0, 0] * x1[3, 0]
        - 2 * d1[3] * x1[0, 1] * x1[3, 1]
    )
    coeffs[28] = (
        2 * d2[0] * d2[3] * x2[0, 0] * x2[3, 0]
        - (d2[0] ** 2) * (x2[0, 1] ** 2)
        - (d2[3] ** 2) * (x2[3, 0] ** 2)
        - (d2[3] ** 2) * (x2[3, 1] ** 2)
        - (d2[0] ** 2) * (x2[0, 0] ** 2)
        + 2 * d2[0] * d2[3] * x2[0, 1] * x2[3, 1]
    )
    coeffs[29] = 2 * d2[0] * d2[3] - (d2[0] ** 2) - (d2[3] ** 2)
    coeffs[30] = (
        (d1[0] ** 2) * (x1[0, 0] ** 2)
        + (d1[0] ** 2) * (x1[0, 1] ** 2)
        + (d1[3] ** 2) * (x1[3, 0] ** 2)
        + (d1[3] ** 2) * (x1[3, 1] ** 2)
        - 2 * d1[0] * d1[3] * x1[0, 0] * x1[3, 0]
        - 2 * d1[0] * d1[3] * x1[0, 1] * x1[3, 1]
    )
    coeffs[31] = (d1[0] ** 2) - 2 * d1[0] * d1[3] + (d1[3] ** 2)
    coeffs[32] = (
        2 * x2[1, 0] * x2[3, 0]
        + 2 * x2[1, 1] * x2[3, 1]
        - (x2[1, 0] ** 2)
        - (x2[1, 1] ** 2)
        - (x2[3, 0] ** 2)
        - (x2[3, 1] ** 2)
    )
    coeffs[33] = (
        (x1[1, 0] ** 2)
        - 2 * x1[1, 1] * x1[3, 1]
        - 2 * x1[1, 0] * x1[3, 0]
        + (x1[1, 1] ** 2)
        + (x1[3, 0] ** 2)
        + (x1[3, 1] ** 2)
    )
    coeffs[34] = (
        2 * d2[1] * x2[1, 0] * x2[3, 0]
        - 2 * d2[1] * (x2[1, 1] ** 2)
        - 2 * d2[3] * (x2[3, 0] ** 2)
        - 2 * d2[3] * (x2[3, 1] ** 2)
        - 2 * d2[1] * (x2[1, 0] ** 2)
        + 2 * d2[1] * x2[1, 1] * x2[3, 1]
        + 2 * d2[3] * x2[1, 0] * x2[3, 0]
        + 2 * d2[3] * x2[1, 1] * x2[3, 1]
    )
    coeffs[35] = (
        2 * d1[1] * (x1[1, 0] ** 2)
        + 2 * d1[1] * (x1[1, 1] ** 2)
        + 2 * d1[3] * (x1[3, 0] ** 2)
        + 2 * d1[3] * (x1[3, 1] ** 2)
        - 2 * d1[1] * x1[1, 0] * x1[3, 0]
        - 2 * d1[1] * x1[1, 1] * x1[3, 1]
        - 2 * d1[3] * x1[1, 0] * x1[3, 0]
        - 2 * d1[3] * x1[1, 1] * x1[3, 1]
    )
    coeffs[36] = (
        2 * d2[1] * d2[3] * x2[1, 0] * x2[3, 0]
        - (d2[1] ** 2) * (x2[1, 1] ** 2)
        - (d2[3] ** 2) * (x2[3, 0] ** 2)
        - (d2[3] ** 2) * (x2[3, 1] ** 2)
        - (d2[1] ** 2) * (x2[1, 0] ** 2)
        + 2 * d2[1] * d2[3] * x2[1, 1] * x2[3, 1]
    )
    coeffs[37] = 2 * d2[1] * d2[3] - (d2[1] ** 2) - (d2[3] ** 2)
    coeffs[38] = (
        (d1[1] ** 2) * (x1[1, 0] ** 2)
        + (d1[1] ** 2) * (x1[1, 1] ** 2)
        + (d1[3] ** 2) * (x1[3, 0] ** 2)
        + (d1[3] ** 2) * (x1[3, 1] ** 2)
        - 2 * d1[1] * d1[3] * x1[1, 0] * x1[3, 0]
        - 2 * d1[1] * d1[3] * x1[1, 1] * x1[3, 1]
    )
    coeffs[39] = (d1[1] ** 2) - 2 * d1[1] * d1[3] + (d1[3] ** 2)

    # Setup expanded equation system
    coeff_ind0 = [
        0,
        8,
        16,
        24,
        32,
        0,
        8,
        16,
        24,
        32,
        1,
        9,
        17,
        25,
        33,
        2,
        10,
        0,
        8,
        16,
        18,
        24,
        26,
        32,
        34,
        0,
        8,
        16,
        24,
        32,
        1,
        9,
        17,
        25,
        33,
        2,
        10,
        8,
        0,
        16,
        18,
        24,
        26,
        32,
        34,
        8,
        0,
        16,
        24,
        32,
        1,
        9,
        17,
        25,
        33,
        3,
        11,
        1,
        9,
        17,
        19,
        25,
        27,
        33,
        35,
        4,
        12,
        2,
        10,
        18,
        20,
        26,
        28,
        34,
        36,
        2,
        10,
        8,
        16,
        18,
        0,
        26,
        24,
        32,
        34,
        9,
        1,
        17,
        25,
        33,
        3,
        11,
        9,
        1,
        19,
        17,
        27,
        25,
        33,
        35,
        5,
        4,
        13,
        12,
        10,
        2,
        18,
        21,
        20,
        26,
        29,
        28,
        34,
        36,
        37,
        10,
        2,
        8,
        0,
        18,
        24,
        26,
        32,
        34,
        16,
        3,
        11,
        19,
        9,
        17,
        1,
        27,
        25,
        33,
        35,
        6,
        14,
        3,
        11,
        19,
        22,
        27,
        30,
        35,
        38,
        4,
        12,
        20,
        28,
        36,
        4,
        12,
        10,
        18,
        20,
        2,
        28,
        26,
        34,
        36,
        5,
        13,
        21,
        29,
        37,
        11,
        3,
        19,
        9,
        1,
        27,
        25,
        33,
        17,
        35,
        6,
        14,
        11,
        3,
        22,
        19,
        30,
        27,
        35,
        38,
        5,
        12,
        13,
        21,
        4,
        20,
        28,
        29,
        36,
        37,
        5,
        12,
        13,
        4,
        10,
        21,
        2,
        20,
        26,
        29,
        28,
        34,
        36,
        37,
        18,
        7,
        15,
        23,
        31,
        39,
        6,
        14,
        22,
        11,
        19,
        3,
        30,
        27,
        35,
        38,
        6,
        14,
        22,
        30,
        38,
        12,
        20,
        4,
        28,
        36,
        13,
        5,
        21,
        29,
        37,
        13,
        5,
        21,
        29,
        37,
        14,
        6,
        22,
        30,
        38,
        13,
        12,
        21,
        5,
        4,
        28,
        29,
        37,
        36,
        20,
        7,
        15,
        23,
        31,
        39,
        14,
        22,
        6,
        30,
        38,
        13,
        5,
        29,
        37,
        21,
        15,
        7,
        23,
        31,
        39,
        7,
        15,
        23,
        31,
        39,
        14,
        6,
        22,
        11,
        3,
        30,
        27,
        35,
        19,
        38,
        7,
        15,
        23,
        31,
        39,
    ]
    coeff_ind1 = [
        15,
        7,
        31,
        39,
        23,
        15,
        7,
        23,
        31,
        39,
        14,
        6,
        30,
        38,
        22,
        15,
        23,
        7,
        31,
        39,
    ]
    ind0 = [
        0,
        2,
        18,
        28,
        39,
        41,
        45,
        60,
        69,
        78,
        80,
        82,
        98,
        108,
        119,
        120,
        122,
        123,
        128,
        130,
        138,
        145,
        148,
        157,
        159,
        164,
        169,
        177,
        186,
        194,
        201,
        205,
        220,
        229,
        238,
        241,
        245,
        246,
        252,
        254,
        260,
        263,
        269,
        276,
        278,
        287,
        293,
        302,
        310,
        313,
        323,
        328,
        330,
        345,
        357,
        360,
        362,
        364,
        369,
        377,
        378,
        386,
        388,
        394,
        399,
        400,
        402,
        403,
        408,
        410,
        418,
        425,
        428,
        437,
        439,
        444,
        449,
        451,
        456,
        457,
        459,
        466,
        467,
        471,
        474,
        486,
        492,
        494,
        503,
        516,
        521,
        525,
        527,
        533,
        540,
        542,
        549,
        550,
        553,
        558,
        560,
        561,
        562,
        565,
        566,
        572,
        574,
        578,
        580,
        583,
        588,
        589,
        596,
        598,
        599,
        607,
        613,
        615,
        621,
        622,
        624,
        630,
        632,
        633,
        635,
        643,
        648,
        650,
        651,
        656,
        659,
        665,
        667,
        671,
        677,
        680,
        682,
        684,
        689,
        697,
        698,
        706,
        708,
        714,
        719,
        723,
        728,
        730,
        745,
        757,
        764,
        769,
        771,
        776,
        777,
        779,
        786,
        787,
        791,
        794,
        801,
        805,
        820,
        829,
        838,
        846,
        852,
        854,
        855,
        861,
        863,
        864,
        872,
        875,
        876,
        881,
        885,
        887,
        893,
        900,
        902,
        909,
        910,
        913,
        918,
        923,
        926,
        928,
        930,
        932,
        934,
        943,
        945,
        956,
        957,
        964,
        967,
        969,
        973,
        975,
        977,
        981,
        982,
        984,
        986,
        990,
        992,
        993,
        994,
        995,
        1000,
        1002,
        1018,
        1028,
        1039,
        1043,
        1048,
        1050,
        1051,
        1056,
        1059,
        1065,
        1067,
        1071,
        1077,
        1084,
        1089,
        1097,
        1106,
        1114,
        1131,
        1136,
        1139,
        1147,
        1151,
        1166,
        1172,
        1174,
        1183,
        1196,
        1207,
        1213,
        1222,
        1230,
        1233,
        1247,
        1253,
        1262,
        1270,
        1273,
        1291,
        1295,
        1296,
        1299,
        1301,
        1304,
        1307,
        1311,
        1312,
        1315,
        1324,
        1329,
        1337,
        1346,
        1354,
        1371,
        1376,
        1379,
        1387,
        1391,
        1415,
        1421,
        1424,
        1432,
        1435,
        1446,
        1452,
        1454,
        1463,
        1476,
        1481,
        1485,
        1500,
        1509,
        1518,
        1526,
        1532,
        1534,
        1535,
        1541,
        1543,
        1544,
        1552,
        1555,
        1556,
        1563,
        1568,
        1570,
        1585,
        1597,
    ]
    ind1 = [
        15,
        21,
        24,
        32,
        35,
        47,
        53,
        62,
        70,
        73,
        95,
        101,
        104,
        112,
        115,
        131,
        136,
        139,
        147,
        151,
    ]

    C0 = np.zeros((40, 40))
    C1 = np.zeros((40, 4))
    C0[np.unravel_index(ind0, (40, 40), "F")] = coeffs[coeff_ind0]
    C1[np.unravel_index(ind1, (40, 4), "F")] = coeffs[coeff_ind1]

    # Linear elimination
    C2 = np.linalg.solve(C0, C1)

    # Setup action matrix
    AM = np.array([-C2[36, :], -C2[37, :], -C2[38, :], -C2[39, :]])

    # Solve eigenvalue problem and get real solutions
    D, V = np.linalg.eig(AM)
    sols = np.array(
        [
            (-C2[35, :] @ V) / V[0, :],
            D,
            V[1, :] / V[0, :],
            V[2, :] / V[0, :],
            V[3, :] / V[0, :],
        ]
    ).T
    sols = sols[np.isreal(D), :]

    # Extract solutions
    solutions = []

    for s in sols:
        s = np.real(s)
        if s[3] < 0 or s[4] < 0:
            continue
        solutions.append(
            (
                1.0,
                s[1],
                np.sqrt(s[0]),
                s[2] * np.sqrt(s[0]),
                f1_0 / np.sqrt(s[3]),
                f2_0 / np.sqrt(s[4]),
            )
        )

    return solutions


def find_transform(X1, X2):
    m1 = np.mean(X1, axis=0)
    m2 = np.mean(X2, axis=0)
    X1m = X1 - m1
    X2m = X2 - m2
    u, s, vt = np.linalg.svd(X2m.T @ X1m)
    R = u @ np.diag([1.0, 1.0, np.linalg.det(u @ vt)]) @ vt
    t = m2 - R @ m1
    return R, t


def test_solver():
    # Setup instance (with positive depths)
    while True:
        x1 = np.c_[np.random.randn(4, 2), np.ones((4,))]
        f1_gt = 1000.0 + 2000.0 * np.random.rand(1)
        f2_gt = 1000.0 + 2000.0 * np.random.rand(1)

        d1_gt = 1.0 + 5 * np.random.rand(4)
        X = x1 * d1_gt[:, None]
        R = np.linalg.qr(np.random.randn(3, 3))[0]
        R = R * np.linalg.det(R)
        t = np.random.randn(3)
        X2 = X @ R.T + t
        d2_gt = X2[:, 2]
        x2 = X2 / d2_gt[:, None]

        # Add shared focal length
        x1[:, 0:2] *= f1_gt
        x2[:, 0:2] *= f2_gt
        x2[:, 0:2] += np.random.randn(4, 2) * 1 + 0.5
        if np.all(d2_gt > 0):
            break

    # Shift and scale gt depths
    a1_gt = np.random.rand(1)
    b1_gt = np.random.randn(1)
    a2_gt = np.random.rand(1)
    b2_gt = np.random.randn(1)

    # d1_gt = a1 * d1 + b1
    d1 = (d1_gt - b1_gt) / a1_gt
    d2 = (d2_gt - b2_gt) / a2_gt

    sols = solve_shift_and_scale_two_focal(x1, x2, d1, d2)
    sols_mono = madpose.solve_scale_and_shift_two_focal(x1.T, x2.T, d1, d2)
    madpose.estimate_scale_shift_pose_two_focal(
        x1.T, x2.T, d1, d2
    )

    print(len(sols), len(sols_mono))
    for k, (a1, b1, a2, b2, f1, f2) in enumerate(sols + sols_mono):
        err = (
            np.abs(a2 - a2_gt / a1_gt)
            + np.abs(b1 - b1_gt / a1_gt)
            + np.abs(b2 - b2_gt / a1_gt)
            + np.abs(f1 - f1_gt)
            + np.abs(f2 - f2_gt)
        )
        focal_err = np.abs(f1 - f1_gt) + np.abs(f2 - f2_gt)
        print(f"focal_error={focal_err}")

        t_skew = np.array(
            [[0, -t[2], t[1]], [t[2], 0, -t[0]], [-t[1], t[0], 0]]
        )
        E = t_skew @ R
        K2_ = np.array([[f2, 0, 0], [0, f2, 0], [0, 0, 1]])
        K1_ = np.array([[f1, 0, 0], [0, f1, 0], [0, 0, 1]])
        F = np.linalg.inv(K2_.T) @ E @ K1_

        d1_corr = a1 * d1 + b1
        d2_corr = a2 * d2 + b2

        x1u = x1.copy()
        x1u[:, 0:2] /= f1
        x2u = x2.copy()
        x2u[:, 0:2] /= f2

        X1 = x1u * d1_corr[:, None]
        X2 = x2u * d2_corr[:, None]
        R_est, t_est = find_transform(X1[0:3, :], X2[0:3, :])

        t_est_skew = np.array(
            [
                [0, -t_est[2], t_est[1]],
                [t_est[2], 0, -t_est[0]],
                [-t_est[1], t_est[0], 0],
            ]
        )
        E_est = t_est_skew @ R_est
        K2_est = np.array([[f2, 0, 0], [0, f2, 0], [0, 0, 1]])
        K1_est = np.array([[f1, 0, 0], [0, f1, 0], [0, 0, 1]])
        F_est = np.linalg.inv(K2_est.T) @ E_est @ K1_est

        # normalize F
        F = F / np.linalg.norm(F)
        F_est = F_est / np.linalg.norm(F_est)
        F_error = np.linalg.norm(F - F_est)
        print(f"F_error={F_error}")

        err_R = np.linalg.norm(R - R_est)
        err_t = np.linalg.norm(
            t / np.linalg.norm(t) - t_est / np.linalg.norm(t_est)
        )
        print(
            f"solution={k}, residual={err}, rotation={err_R}, translation={err_t}"
        )


if __name__ == "__main__":
    test_solver()
